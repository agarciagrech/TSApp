/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Utilities;

import db.jdbc.*;
import db.pojos.*;
import java.security.*;
import java.util.*;
import pojos.users.*;

/**
 *
 * @author gisel
 */
public class ClientUtilities {
    
    private static Scanner sc = new Scanner(System.in);
    private static SQLitePatientTSManager patientman = new SQLitePatientTSManager();
    private static SQLiteDoctorManager doctorman = new SQLiteDoctorManager();
    public static String trashcan;
    
    
    private static void register(String name, String surname, Integer idUser) throws Exception { //AÃ‘ADIR EL EXISTING USERNAME
        //autogenerate username
        String username = ""+name.charAt(0)+"."+surname+""+Integer.valueOf(surname.substring(0, 1));
        //autogenerated password
        String[] symbols = {"0", "1", "9", "7", "K", "Q", "a", "b", "c", "U","w","3","0"};
        int length = 14;
        Random random;
        random = SecureRandom.getInstanceStrong();
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
             int indexRandom = random.nextInt ( symbols.length );
             sb.append( symbols[indexRandom] );
        }
        String password = sb.toString();
        //List the roles
		System.out.println(userman.getRoles());
		//ask the user for a role
		System.out.println("Type the chosen role ID: ");
		Integer id = null;
		int a=0;
		do {
			try {
				id = sc.nextInt();
				a=1;
			} catch (Exception e) {
				trashcan = sc.next();
				System.out.println("Not a valid role id. Try again.");
			}
		} while (a==0);

		Role role = userman.getRole(id);
                
        //generate the hash
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(password.getBytes());
        byte[] hash = md.digest();
        User user = new User(username, hash, role);
        userman.newUser(user);
        System.out.println("The autogenerated username is:"+ username);
        System.out.println("The autogenerated password is:"+ password);
        if(user.getRole().getRole().equalsIgnoreCase("patient")) {
                patientman.createLinkUserPatient(user.getUserId(), idUser); 
        } else if(user.getRole().getRole().equalsIgnoreCase("doctor")) {
                doctorman.createLinkUserDoctor(user.getUserId(), idUser); 
        }
    }
    
   
    
    private static void firstlogin(){
        try{
        String username = "admin";
        String password = "admin";
        Role role = userman.getRole(2);
        MessageDigest md = MessageDigest.getInstance("MD5");
        md.update(password.getBytes());
        byte[] hash = md.digest();
        User user = new User(username, hash, role);
        userman.newUser(user);
        Doctor doctor = new Doctor("admin", "adnmin", 1);
        doctorman.addDoctor(doctor);
	Doctor created = new Doctor(doctorman.selectDoctor(1));
	doctorman.createLinkUserDoctor(user.getUserId(), created.getDoctorId());
        System.out.println("Admin created");
        }catch(Exception ex) {
                ex.printStackTrace();
        }
    }
    
    public static void changePassword() {
        sc = new Scanner (System.in);
        try{
            System.out.println("Please enter your username and password:");
            System.out.println("Username:");
            String username = sc.next();
            System.out.println("Password:");
            String password = sc.next();
            User user = userman.checkPassword(username, password);
            System.out.println("Introduce the new password: ");
            String newPassword1 = sc.next();
            System.out.println("Confirm your new password: ");
            String newPassword2 = sc.next();
            if(newPassword1.equals(newPassword2)) {
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    md.update(newPassword1.getBytes());
                    byte[] hash = md.digest();
                    userman.updateUser(user, hash);
                    System.out.println("Password updated");
            } else {
                    System.out.println("Error. Password confirmation does not match");
            }
        }catch(Exception ex) {
                ex.printStackTrace();
        }
    }
}
