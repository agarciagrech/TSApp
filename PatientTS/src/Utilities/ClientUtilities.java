/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Utilities;

import db.jdbc.*;
import db.pojos.*;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.security.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import pojos.users.*;

/**
 *
 * @author gisel
 */
public class ClientUtilities {
    
    private static Scanner sc = new Scanner(System.in);
    private static SQLiteUserManager userman = new SQLiteUserManager();
    private static SQLiteRoleManager roleman = new SQLiteRoleManager();
    private static SQLitePatientTSManager patientman = new SQLitePatientTSManager();
    private static SQLiteDoctorManager doctorman = new SQLiteDoctorManager();
    public static String trashcan;
    
    
    public static void registerDoctor(BufferedReader br, PrintWriter pw){
        try {
            Doctor d =  Utilities.CommunicationWithClient.receiveDoctor(br); //receivePatient and doctor deberia devolver un objeto paciente o doctor
            //autogenerate username
            String username = ""+d.getDoctorName().charAt(0)+"."+d.getDoctorSurname()+""+Integer.valueOf(d.getDoctorSurname().substring(0, 1));
            //autogenerated password
            String[] symbols = {"0", "1", "9", "7", "K", "Q", "a", "b", "c", "U","w","3","0"};
            int length = 14;
            Random random;
            random = SecureRandom.getInstanceStrong();
            StringBuilder sb = new StringBuilder(length);
            for (int i = 0; i < length; i++) {
                int indexRandom = random.nextInt ( symbols.length );
                sb.append( symbols[indexRandom] );
            }
            String password = sb.toString();
            //generate the hash
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            User user = new User(username, hash, 2);
            userman.addUser(user);
            Utilities.CommunicationWithClient.sendUser(pw, user);
            doctorman.createLinkUserDoctor(user.getUserId(), d.getDoctorId());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientUtilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public static void registerPatient(BufferedReader br, PrintWriter pw){
        try {
            //autogenerate username
            PatientTS p =  Utilities.CommunicationWithClient.receivePatient(br); //receivePatient and doctor deberia devolver un objeto paciente o doctor
            String username = Integer.toString(p.getMedCardId());
            //autogenerated password
            String[] symbols = {"0", "1", "9", "7", "K", "Q", "a", "b", "c", "U","w","3","0"};
            int length = 14;
            Random random;
            random = SecureRandom.getInstanceStrong();
            StringBuilder sb = new StringBuilder(length);
            for (int i = 0; i < length; i++) {
                int indexRandom = random.nextInt ( symbols.length );
                sb.append( symbols[indexRandom] );
            }
            String password = sb.toString();
            //generate the hash
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            User user = new User(username, hash, 1);
            userman.addUser(user);
            Utilities.CommunicationWithClient.sendUser(pw, user);
            patientman.createLinkUserPatient(user.getUserId(), p.getMedCardId());
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientUtilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
    public static User login(BufferedReader bf, PrintWriter pw){
        User u = Utilities.CommunicationWithClient.receiveUser(bf);
        User user = userman.checkPassword(u.getUsername(), u.getPassword());
        if(user == null) {
            pw.println("Wrong username or password");
        } 
        return user;
    }
    
    public static void firstlogin(){
        try{
        String username = "admin";
        String password = "admin";
        Role role = roleman.selectRoleById(2);
        // TO DO : ENCRIPTAR PASSWORD
        User user = new User(username, password, role);
        userman.addUser(user);
        Doctor doctor = new Doctor("admin", "adnmin", 1);
        doctorman.addDoctor(doctor);
	Doctor created = new Doctor(doctorman.selectDoctor(1));
	doctorman.createLinkUserDoctor(user.getUserId(), created.getDoctorId());
        System.out.println("Admin created");
        }catch(Exception ex) {
                ex.printStackTrace();
        }
    }
    /*
    // Al final damos esta opcion?
    public static void changePassword() {
        sc = new Scanner (System.in);
        try{
            System.out.println("Please enter your username and password:");
            System.out.println("Username:");
            String username = sc.next();
            System.out.println("Password:");
            String password = sc.next();
            User user = null;
            userman.checkPassword(username, password);
            System.out.println("Introduce the new password: ");
            String newPassword1 = sc.next();
            System.out.println("Confirm your new password: ");
            String newPassword2 = sc.next();
            if(newPassword1.equals(newPassword2)) {
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    md.update(password.getBytes());
                    byte[] hash = md.digest();
                    userman.updateUser(user, hash);
                    System.out.println("Password updated");
            } else {
                    System.out.println("Error. Password confirmation does not match");
            }
        }catch(Exception ex) {
                ex.printStackTrace();
        }
    }
    */
}
