/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Utilities;


import db.interfaces.DoctorManager;
import db.interfaces.PatientTSManager;
import db.interfaces.RoleManager;
import db.interfaces.UserManager;
import db.jdbc.*;
import db.pojos.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import pojos.users.*;

/**
 *
 * @author gisel
 */
public class ClientUtilities {
    
    private static Scanner sc = new Scanner(System.in);
    private static UserManager userman;
    private static RoleManager roleman;
    private static PatientTSManager patientman;
    private static DoctorManager doctorman;
    public static String trashcan;
    
    
    public static void registerDoctor(BufferedReader br, PrintWriter pw, UserManager userman, DoctorManager doctorman){
        try {
            Doctor d =  Utilities.CommunicationWithClient.receiveDoctor(br); 
            
            //autogenerate username
            String username = ""+d.getDoctorName().charAt(0)+"."+d.getDoctorSurname()+""+Integer.valueOf(d.getDoctorSurname().charAt(0));
            //autogenerated password
            String[] symbols = {"0", "1", "9", "7", "K", "Q", "a", "b", "c", "U","w","3","0"};
            int length = 14;
            Random random;
            random = SecureRandom.getInstanceStrong();
            StringBuilder sb = new StringBuilder(length);
            for (int i = 0; i < length; i++) {
                int indexRandom = random.nextInt ( symbols.length );
                sb.append( symbols[indexRandom] );
            }
            String password = sb.toString();
            //generate the hash
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            User user = new User(username, password, 2);
            userman.addUser(user);
            user.setUserId(userman.getId(username));
            userman.createLinkUserRole(2,user.getUserId());
            System.out.println("user added");
            Utilities.CommunicationWithClient.sendUser(pw, user);
            doctorman.addDoctor(d);
            System.out.println("doctor added");
            d.setDoctorId(doctorman.getId(d.getDoctorName()));
            doctorman.createLinkUserDoctor(user.getUserId(), d.getDoctorId());
            pw.println("Doctor successfully registered");
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientUtilities.class.getName()).log(Level.SEVERE, null, ex);
            pw.println("Doctor not registered");
        } catch (SQLException ex) {
            Logger.getLogger(ClientUtilities.class.getName()).log(Level.SEVERE, null, ex);
            pw.println("Doctor not registered");
        }
    }
    
    public static void registerPatient(BufferedReader br, PrintWriter pw, UserManager userman,PatientTSManager patientman,DoctorManager doctorman){
        try {
            //autogenerate username
            PatientTS p =  Utilities.CommunicationWithClient.receivePatient(br); //receivePatient and doctor deberia devolver un objeto paciente o doctor
            
            String username = Integer.toString(p.getMedCardId());
            //autogenerated password
            String[] symbols = {"0", "1", "9", "7", "K", "Q", "a", "b", "c", "U","w","3","0"};
            int length = 14;
            Random random;
            random = SecureRandom.getInstanceStrong();
            StringBuilder sb = new StringBuilder(length);
            for (int i = 0; i < length; i++) {
                int indexRandom = random.nextInt ( symbols.length );
                sb.append( symbols[indexRandom] );
            }
            String password = sb.toString();
            //generate the hash
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(password.getBytes());
            byte[] hash = md.digest();
            String pass = new String (hash,StandardCharsets.UTF_8);
            User user = new User(username, password,1);
            userman.addUser(user);
            user.setUserId(userman.getId(username));
            userman.createLinkUserRole(1,user.getUserId() );
            System.out.println("user added");
            Utilities.CommunicationWithClient.sendUser(pw, user);
            patientman.addPatient(p);
            System.out.println("patient added");
            patientman.createLinkUserPatient(user.getUserId(), p.getMedCardId());
            pw.println("Patient successfully registered");
            List<Doctor> doctorl=doctorman.selectAllDoctors();
            pw.println(doctorl.size());
            for (int i =0; i<doctorl.size();i++){
                   pw.println(doctorl.get(i));
            }
            int doctorid = Integer.parseInt(br.readLine());
            patientman.createLinkDoctorPatient( p.getMedCardId(), doctorid);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ClientUtilities.class.getName()).log(Level.SEVERE, null, ex);
            pw.println("Patient not registered");
        } catch (IOException ex) {
            Logger.getLogger(ClientUtilities.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
   
    public static User login(BufferedReader bf, PrintWriter pw,UserManager userman){
        User u = Utilities.CommunicationWithClient.receiveUser(bf);
        User user = userman.checkPassword(u.getUsername(), u.getPassword());
        System.out.println(user.toString());
        if(user == null) {
            pw.println("Wrong username or password");
        }else{
            if(u.getUsername().equals(user.getUsername())&&u.getPassword().equals(user.getPassword())){
                int id = userman.getId(u.getUsername());
                User u2 = userman.selectUserByUserId(id);
                System.out.println(u2.toString());
                return u2;
            }else{
                pw.println("Wrong username or password");
            }
        } 
        return null;
    }
    
    public static void firstlogin(UserManager userman, DoctorManager doctorman,RoleManager roleman){
        try{
        String username = "admin";
        String password = "admin";
        Role role = roleman.selectRoleById(2);
        User user = new User(username, password,2);
        userman.addUser(user);
        user.setUserId(userman.getId(username));
        userman.createLinkUserRole(role.getId(), user.getUserId());
        Doctor doctor = new Doctor("admin", "adnmin",2);
        doctorman.addDoctor(doctor);
        doctor.setDoctorId(doctorman.getId(doctor.getDoctorName()));
	doctorman.createLinkUserDoctor(user.getUserId(), doctor.getDoctorId());
        System.out.println("Admin created");
        }catch(Exception ex) {
                ex.printStackTrace();
        }
    }
   
}
